function res_list = CurvedBv6(nonlinear, epsilon, C)
addpath('./','./utils')
animation = 1;
pause_time = 0;
make_gif = 0;
problem = 2;
param.nonlinear = nonlinear;
gif_name = 'example13.gif';
title_name = 'Curved boundary, Curved metric, Alternative Cost function';
save_output = 0;

Nx1 = 100;
Nx2 = 100;
max_iter = 500;
tolerance = 1e-6;
epsilon = epsilon; % Under-relaxation factor

% Grid size
N = Nx1*Nx2;

% Equispaced computational coordinates
s1 = linspace(0, 1, Nx1);
s2 = linspace(0, 1, Nx2);

% Initial physical coordinates (equispaced)
if ismember(problem, [1,2])
    M_type = problem;
    [x1, x2] = meshgrid(s1, s2);
    [x1_exact, x2_exact]  = meshgrid(s1, s2);
elseif problem == 3
    M_type = problem;
    [x1, x2] = InitProb3(Nx1, Nx2, 0.1);
elseif problem == 4
    M_type = problem;
    [x1, x2] = InitProb4(Nx1, Nx2);
    [x1_exact, x2_exact] = InitProb4(50, 50);
elseif problem == 5
    [x1, x2, x1_exact, x2_exact, M_type] = InitProb5(Nx1, Nx2);
end

% Plot initial grid
%plot(x1, x2, 'k'); hold on; plot(x1', x2', 'k');
%title(title_name); xlim([-30,30]); ylim([-30,30]);
%axis equal; hold off
%if make_gif; exportgraphics(gcf, gif_name); end

res_list = [];
err_list = [];
%%
param.forDx = 0;
M = GetM(x1, x2, M_type, C);
%[A, b, res] = AssembleLinearSystem(x1, x2, M, param);
err = [x1(:);x2(:)];
res_list = [res_list, norm(res)];
for iter = 1:max_iter
    M = GetM(x1, x2, M_type, C);
    
    param.forDx = 0;
    [A, b, o] = AssembleLinearSystem(x1, x2, M, param);
    res = b - A*[x1(:);x2(:)];

    param.forDx = 1;
    [A, b, o] = AssembleLinearSystem(x1, x2, M, param);

    if param.nonlinear == 4
        res = A*err - b;
        err = A \ b;
    else
        err = A \ res;
    end

    res = abs(res(1:N)) + abs(res(N+1:end));
    res = reshape(res, Nx2, Nx1);
    res = res(2:end-1, 2:end-1);

    dx1 = reshape(err(1:N), Nx2, Nx1);
    dx2 = reshape(err(N+1:end), Nx2, Nx1);

    dx1(1,1)=0; dx1(1,end)=0; dx1(end,1)=0; dx1(end,end)=0;
    dx2(1,1)=0; dx2(1,end)=0; dx2(end,1)=0; dx2(end,end)=0;

    x1 = x1 + epsilon*dx1;
    x2 = x2 + epsilon*dx2;

    res_list = [res_list, norm(res)];
    err_list = [err_list, norm(norm(dx1,'fro'),norm(dx2,'fro'))];

    if problem == 0 || problem == 4 || problem == 5
        [x1, x2] = UpdateCorrection(x1, x2, x1_exact, x2_exact);
    end
    
    if animation == 1
        figure(1)
        plot(x1, x2, 'k'); hold on; plot(x1', x2', 'k');
        title(title_name); xlim([0,1]); ylim([0,1]);
        %plot(s1, x1(20,:));  xlim([0,1]); ylim([-0.1,1]); grid on
        axis equal; hold off;
        pause(pause_time);
    end
    if make_gif; exportgraphics(gcf, gif_name, Append=true); end

    if tolerance > res_list(end); break; end
    if res_list(end) > 1/tolerance * res_list(1)
        res_list(end) = NaN;
        break; 
    end
end
end

%%
%figure(2)
%semilogy(res_list); hold on
%legend('Residual', 'Error');
%grid on
